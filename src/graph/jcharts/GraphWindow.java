/*
*  This file is part of S:SIMS.
*
*  S:SIMS is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  S:SIMS is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with S:SIMS.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DSGraphWindow.java
 *
 * Created on Sep 2, 2010, 4:44:14 AM
 */

package graph.jcharts;

import java.awt.image.*;
import java.awt.Graphics;
import org.jCharts.axisChart.*;
import org.jCharts.properties.*;

/**
 * A window to show JCharts graph images
 * @author 20378332
 */
public class GraphWindow extends javax.swing.JFrame {

    private BufferedImage image;
    private AxisChart ac;
    private double min;
    private double max;
    private double scale = 1.0;
    private double scaleIncrease = 0.5;
    private int totalRot = 0;
    private double offset = 0;
    private int previousY = -1;

    /** Creates new form DSGraphWindow */
    public GraphWindow(AxisChart ac) {
        this.ac = ac;
        min = ((DataAxisProperties) ac.getAxisProperties().getYAxisProperties()).getUserDefinedMinimumValue();
        max = min + ((DataAxisProperties) ac.getAxisProperties().getYAxisProperties()).getUserDefinedIncrement() * 12;
        GraphFunctions.reScale(ac, min, max, scale, offset);
        image = GraphFunctions.getImage(ac);
        initComponents();

        image = GraphFunctions.setImageSize(image, this.getWidth() - 20, this.getHeight() - 40);
        paint(this.getGraphics());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graph");
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 417, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        image = GraphFunctions.getImage(ac);
        image = GraphFunctions.setImageSize(image, this.getWidth() - 20, this.getHeight() - 40);
    }//GEN-LAST:event_formComponentResized

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        paint(this.getGraphics());
    }//GEN-LAST:event_formComponentShown

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        int numOfRotation = evt.getWheelRotation();
        totalRot += numOfRotation;
        
        if (totalRot >= 0)   {
            scale = 1.0 + (totalRot * scaleIncrease);
            GraphFunctions.reScale(ac, min + offset, max + offset, scale, offset);
        } else {
            scale = 1.0 - (totalRot * scaleIncrease);
            GraphFunctions.reScale(ac, min + offset, max + offset, 1/scale, offset);
        }
        
        image = GraphFunctions.getImage(ac);
        image = GraphFunctions.setImageSize(image, this.getWidth() - 20, this.getHeight() - 40);
        paint(this.getGraphics());
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (previousY == -1)
            previousY = evt.getY();
        else {
            int newY = evt.getY();
            double scaleIncrease = (double)Math.abs(previousY - newY) / (double)this.getHeight();
            scaleIncrease *= 13;

            double increment;

            if (totalRot >= 0)
                increment = ((max - min) * scale) / 10;
            else
                increment = ((max - min) * (1/scale)) / 10;

            if (newY > previousY)   {
                offset += scaleIncrease * increment;
            } else if (newY < previousY) {
                offset -= scaleIncrease * increment;
            }

            if (newY != previousY)  {
                if (totalRot >= 0) {
                    scale = 1.0 + (totalRot * this.scaleIncrease);
                    GraphFunctions.reScale(ac, min + offset, max + offset, scale, offset);
                } else {
                    scale = 1.0 - (totalRot * this.scaleIncrease);
                    GraphFunctions.reScale(ac, min + offset, max + offset, 1 / scale, offset);
                }
                image = GraphFunctions.getImage(ac);
                image = GraphFunctions.setImageSize(image, this.getWidth() - 20, this.getHeight() - 40);
                paint(this.getGraphics());
            }

            previousY = newY;
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        previousY = -1;
    }//GEN-LAST:event_formMouseReleased

    public void paint(Graphics g)   {
        //System.err.println("painting");
        super.paint(g);
        // Draw image centered.
        int x = (getWidth() - image.getWidth())/2;
        int y = (getHeight() - image.getHeight())/2;
        g.drawImage(image, x, y + 10, this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
